import AuditSection from "../components/TextBox";
import InfoCard from "../components/AuditInfo";
import pic1 from "../assets/pic1.jpg";
import "../styles/LayerOne.css";
import LayerInfo from "../components/LayerInfo";

function LayerOne() {
  const auditSections = [
    {
      key: "sageLifeCycle",
      title: "SDLC",
      content: (
        <p>
          <strong>Безопасный жизненный цикл разработки ПО (SDLC)</strong>
          <br />
          В современных реалиях киберугроз обеспечение безопасности на всех этапах разработки программного обеспечения становится критически важным. Пренебрежение защитными мерами в процессе создания ПО может привести к утечке конфиденциальных данных, финансовым потерям и репутационным рискам. 
          <br /><br />
          Мы применяем комплексный подход к безопасности, начиная с первых этапов проектирования и заканчивая развертыванием и эксплуатацией программного обеспечения.
          <ul>
            <li>
              <strong>Интеграция безопасности на всех этапах разработки:</strong> Используем подход Security by Design, который позволяет проектировать системы с учетом потенциальных угроз еще до написания кода.
            </li>
            <li>
              <strong>Использование безопасных методов кодирования:</strong> Применяем лучшие практики разработки, такие как контроль входных данных, обработка ошибок и защита от SQL-инъекций и межсайтовых атак.
            </li>
            <li>
              <strong>Моделирование угроз:</strong> Анализируем потенциальные векторы атак и разрабатываем стратегии их предотвращения. Это позволяет минимизировать уязвимости еще на этапе проектирования.
            </li>
            <li>
              <strong>Автоматизация процессов безопасности:</strong> Внедряем автоматизированные инструменты проверки кода, мониторинга уязвимостей и контроля зависимостей для своевременного выявления проблем.
            </li>
          </ul>
        </p>
      ),
    },
    {
      key: "software",
      title: "Аудиты кода",
      content: (
        <p>
          <strong>Аудиты кода и оценка уязвимостей</strong>
          <br />
          Проверка кода на наличие уязвимостей позволяет значительно снизить риски атак и повысить надежность системы. Автоматизированные инструменты анализа могут выявить лишь часть проблем, поэтому мы применяем комплексный подход, включающий ручной аудит специалистами.
          <br /><br />
          Основные методы аудита:
          <ul>
            <li>
              <strong>Статический анализ кода (SAST):</strong> Проверка исходного кода без его выполнения. Этот метод помогает выявить ошибки, связанные с некорректной обработкой данных, утечками памяти и нарушением логики безопасности.
            </li>
            <li>
              <strong>Динамическое тестирование безопасности (DAST):</strong> Анализ уже работающего приложения, при котором выявляются уязвимости, связанные с некорректной обработкой входных данных и взаимодействием с внешними сервисами.
            </li>
            <li>
              <strong>Фаззинг (Fuzz Testing):</strong> Методика тестирования, при которой приложение подвергается подаче случайных или некорректных данных для выявления слабых мест.
            </li>
            <li>
              <strong>Ручной анализ кода:</strong> Опытные специалисты анализируют код с учетом особенностей бизнес-логики и специфики проекта, выявляя сложные уязвимости, которые могут быть упущены автоматизированными инструментами.
            </li>
          </ul>
        </p>
      ),
    },
    {
      key: "secureCoding",
      title: "Обучение разработчиков безопасному кодированию",
      content: (
        <p>
          <strong>Обучение разработчиков безопасному кодированию</strong>
          <br />
          Одной из основных причин уязвимостей в ПО являются ошибки разработчиков, возникающие из-за недостаточного уровня знаний в области безопасности. Мы предлагаем комплексные обучающие программы, которые позволяют разработчикам эффективно выявлять и предотвращать уязвимости на этапе написания кода.
          <br /><br />
          Наши образовательные инициативы включают:
          <ul>
            <li>
              <strong>Практические воркшопы по безопасному кодированию:</strong> Разработка реальных сценариев атак и их предотвращение в условиях, приближенных к боевым.
            </li>
            <li>
              <strong>Обучение по стандартам OWASP Top 10:</strong> Разбор десяти наиболее распространенных уязвимостей веб-приложений, таких как XSS, SQL-инъекции, небезопасная аутентификация и другие.
            </li>
            <li>
              <strong>Внедрение DevSecOps-практик:</strong> Интеграция процессов безопасности в CI/CD-пайплайн, что позволяет обнаруживать и устранять уязвимости на ранних стадиях разработки.
            </li>
            <li>
              <strong>Персонализированные программы обучения:</strong> Курсы адаптируются под уровень знаний и специфику работы команды разработчиков, что позволяет быстрее и эффективнее внедрять полученные знания в практику.
            </li>
            <li>
              <strong>Тестирование и сертификация:</strong> Проведение финальных испытаний и выдача сертификатов, подтверждающих уровень владения безопасными методами кодирования.
            </li>
          </ul>
        </p>
      ),
    },
  ];

  return (
    <div>
      <LayerInfo
        title="Безопасная разработка и защита IoT"
        backgroundImage="https://inova.kz/wp-content/uploads/2023/05/wall_4_3-1.png"
        breadcrumbs={[{ label: "Безопасная разработка и защита IoT" }]}
      />
      <AuditSection
        title="Безопасность разработки приложений"
        paragraphs={[
          "Мы внедряем передовые методы защиты ПО, проводим аудит кода, обучаем разработчиков принципам безопасного кодирования и разрабатываем стратегии защиты IoT-устройств от современных киберугроз.",
        ]}
        imageURL={pic1}
        imageAlt="audit"
      />

      {/* Передача секций в InfoCard (AuditInfo) */}
      <InfoCard sections={auditSections} />
    </div>
  );
}

export default LayerOne;
